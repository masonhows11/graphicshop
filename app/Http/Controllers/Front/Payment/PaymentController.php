<?php

namespace App\Http\Controllers\Front\Payment;

use App\Http\Controllers\Controller;
use App\Http\Requests\Front\Payment\PayRequest;
use App\Mail\SendPurchasedFilesMail;
use App\Services\PaymentService\PaymentService;
use App\Services\PaymentService\Request\IDPayRequest;
use App\Models\Basket;
use App\Models\Order;
use App\Models\Payment;
use App\Services\PaymentService\Request\IDPayVerifyRequest;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Mail;
use Illuminate\Support\Str;

class PaymentController extends Controller
{
    //

    public function payment(PayRequest $request)
    {
        $user = Auth::user();
        $basket = Basket::where('user_id', $user->id)->get();
        $order_amount = array_sum(array_column(Basket::where('user_id', $user->id)->get()->toArray(), 'price'));
        try {
            $payment_number = Str::random(20);
            //// create order l.v 1
            $order = Order::updateOrCreate(
                ['user_id' => $user->id, 'order_status' => 0],
                ['amount' => $order_amount,
                    'payment_number' => $payment_number,
                    'order_status' => 0,]);
            //// create order items / details l.v 2
            $orderForOrderItems = $basket->map(function ($items) {
                return $items->only(['user_id', 'product_id', 'price', 'number']);
            });
            $order->orderItems()->createMany($orderForOrderItems->toArray());
            //// create payment l.v 3
            $payment = Payment::create([
                'user_id' => $user->id,
                'order_id' => $order->id,
                'gateway' => 'idpay',
                'bank_id' => null,
                'payment_number' => $order->payment_number,
                'amount' => $order->amount,
                'status' => 1,
            ]);
            // return redirect()->back()->with('warning',__('messages.this_part_is_being_prepared'));
            //// l.v 4
            //// make gateway instance with arguments
            $idPayRequest = new  IDPayRequest([
                'amount' => $payment->amount,
                'user' => $user,
                'orderId' => $order->payment_number,
                'apiKey' => config('services.gateways.id_pay.api_key'),
            ]);
            // pay the payment order
            $paymentService = new PaymentService(PaymentService::IDPAY, $idPayRequest);
            // dd($paymentService->pay());
            return $paymentService->pay();
        } catch (\Exception $ex) {
            // return  $ex->getMessage();
            return back()->with(['error' => $ex->getMessage()]);
        }
    }

    public function callBack(Request $request)
    {


        //// lv.1
        $paymentInfo = $request->all();

        // id generated by bank
        // order_id is payment_number
        // apiKey is idPay api key

        //// l.v 2
        // make  verify gateway instance with arguments
        $idPayVerifyRequest = new  IDPayVerifyRequest([
            'apiKey' => config('services.gateways.id_pay.api_key'),
            'id' => $paymentInfo['id'],
            'orderId' => $paymentInfo['order_id'],
        ]);
        //// lv.3
        $paymentService = new PaymentService(PaymentService::IDPAY, $idPayVerifyRequest);
        //// lv.4
        $result = $paymentService->verify();


        // if status failed redirect to home
        if ($result['status'] == false) {
            return redirect()->route('failed.payment.result');
        }
        // if status success send email contain file links
        if ($result['status'] == 100 or $request['status'] == 101) {

            // update payment
            $currentPayment = Payment::where('payment_number', '=', $result['data']['order_id'])->first();
            $currentPayment->update([
                'status' => 'paid',
                'bank_id' => $result['data']['track_id'],
            ]);
            // update order
            $currentPayment->order()->update([
                'order_status' => 2,
            ]);
            // get order items & link of files
            $attachmentFiles = $currentPayment->order->orderItems->map(function ($item) {
                return $item->product->source_url;
            });

            // l.v 1
            // send email or display in profile section
            $attachmentFiles = $attachmentFiles->toArray();
            $files = [];
            if ($attachmentFiles) {
                foreach ($attachmentFiles as $file) {
                    array_push($files, storage_path('app/local_storage/' . $file));
                }
            }
            $currentUser = $currentPayment->order->user;
            // get files from storage & push in array then attache to email
            // do this things here not in mailable class
            Mail::to($currentUser->email)->send(new SendPurchasedFilesMail($files, $currentUser));

            // l.v 2
            // delete data from basket
            $cartItems = Basket::where('user_id', $currentUser->id)->get();
            foreach ($cartItems as $cartItem) {
                $cartItem->delete();
            }

            session()->flash('success', 'پرداخت شما انجام شد.لینک فایها به ایمیل ارسال شد');
            return redirect()->route('home');

        }
        session()->flash('error',__('messages.payment_was_not_made'));
        return redirect()->route('home');


    }

    public function failedPaymentResult()
    {
        $user = Auth::id();
        // update order
        $currentOrder = Order::where('user_id', $user)->where('order_status', '=', 0)->first();
        $currentOrder->order_status = 1;
        $currentOrder->save();

        // update payment
        $currentPayment = Payment::where('order_id', '=', $currentOrder->id)->first();
        $currentPayment->update([
            'status' => 'unpaid',
            'bank_id' => null,
        ]);
        return redirect()->route('cart.check')->with(['error' => 'پرداخت شما انجام نشد']);
    }


}
